num_occur_in:
  ! redef  [write][r's]
  slb  $r0, 1010 ! 0x0A
  sli  $r0, 4    ! $r0 = 0xA0 = 160
  ! redef [write][p's]
  lw  $p0, $r0   ! $p0 = data_mem[160]
  sli  $r2, 8    ! cnt = 0
  addi  $r3, 8
  sli  $r3, 4    ! constant 128
  sub  $r3, 1    ! change to 127 b/c condition (i >= 128 same as 127 < i)
  ! redef  [write][q's]
  sli  $q2, 8
  addi  $q2, 5   ! constant 5
L1:
  ! redef  [write][r's]
  subi  $r0, 1   ! i = 159, then decrement onward ;)
  ! redef  [write][p's]
  ! redef  [read1][r's]
  ! redef  [read0][r's]
  slt  $p1, $r3, $r0  ! if( 127 < 159 )
  ! redef  [read1][p's]
  ! redef  [read0][some register]
  bnz  $p1, END2
  ! redef  [write][r's]
  sli  $r1, 8    ! j = 0
  ! redef  [write][q's]
  lw  $q0, $r0   ! load buf = data_mem[i]
L2:
  ! redef  [write][q's]
  ! redef  [read0][p's]
  ! redef  [read1][q's]
  xor  $q1, $q0, $p0  ! temp = buf ^ pat
  sli  $q1, 4         ! temp <<= 4
  sri  $q0, 1         ! buf >>= 1
  bnz  $q1, NO_PAT
  ! redef [write][r's]
  addi  $r2, 1         ! cnt += 1
NO_PAT1:
  addi  $r1, 1         ! j += 1
  ! redef  [write][p's]
  ! redef  [read1][r's]
  ! redef  [read0][q's]
  slt  $p1, $r1, $q2  ! if ( j < 5 )
  ! redef  [read1][p's]
  ! redef  [read0][some register]
  bnz  $p1, L1
  ! redef  [write][p's]
  addi  $p1, 1        ! $p0 = 1
  bnz  $p1, L2
END1:
  slb  $p2, 1100
  sli  $p2, 4    ! write location 192
  ! redef  [read1][r's]
  ! redef  [read0][p's]
  sw  $r2, $p2   ! data_mem[192] = cnt

num_bytes:
  ! redef  [write][r's]
  sli  $r0, 8    ! clear i
  slb  $r0, 1010 ! i = 0x0A
  sli  $r0, 4    ! i = 0xA0 = 160
  sli  $r2, 8    ! cnt = 0
  addi  $r3, 8
  sli  $r3, 4    ! constant 128
  sub  $r3, 1    ! change to 127 b/c condition (i >= 0)
                 ! redef  [write][q's]
  sli  $q2, 8
  addi  $q2, 5   ! constant 5

L1:
                 ! redef  [write][r's]
  subi  $r0, 1   ! i = 159, then decrement onward ;)
                 ! redef  [write][p's]
                 ! redef  [read1][r's]
                 ! redef  [read0][r's]
  slt  $p0, $r3, $r0  ! if( 127 < 159 )
  bnz  $p0, END2
                 ! redef  [write][r's]
  sli  $r1, 8    ! j = 0
                 ! redef  [write][q's]
  sli  $q3, 0    ! pat = 0
  lw  $q0, $r0   ! load buf = data_mem[i]

L2:
                 ! redef [read0][p's]
                 ! redef [read1][q's]
  xor  $q1, $q0, $p0  ! temp = buf ^ pat
  sli  $q1, 4         ! temp <<= 4
  sri  $q0, 1         ! buf >>= 1
  bnz  $q1, NO_PAT
                      ! redef [write][r's]
  addi  $r2, 1         ! cnt += 1
  addi  $q3, 1         ! pat_det
  bnz  $q3, L1

NO_PAT1:
  addi  $r1, 1         ! j += 1
                       ! redef [write][p's]
                       ! redef [read1][r's]
                       ! redef [read0][q's]
  slt  $p0, $r1, $q2  ! if ( j < 5 )
                      ! redef [read1][p's]
  bnz  $p0, L1
                      ! redef  [write][p's]
  addi  $p0, 1        ! $p0 = 1
  bnz  $p0, L2

END1:
  slb  $p1, 1100 ! (0x0C)
  sli  $p1, 4    ! $p1 = 192 (write location 1)


cnt_occur:  ! does cross byte boundaries

END3:
  slb  $p3, 1100
  sli  $p3, 4
  addi  $p3, 2   ! $p3 = 194 (write location 3)
