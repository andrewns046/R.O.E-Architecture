011_00_0000 //  redef 0000 _(num_occur_in)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_1010 //  redef 1010 
000_00_1010 //  slb  $r0, 1010 ! 0x0A 
011_00_0110 //  redef 0110 
010_0_00_011 //  sli  $r0, 4    ! $r0 = 0xA0 = 160 
011_00_0010 //  redef 0010 
011_00_0100 //  redef 0100 
011_01_00_00 //  lw  $p0, $r0   ! $p0 = data_mem[160] 
011_00_0110 //  redef 0110 
010_0_10_111 //  sli  $r2, 8    ! cnt = 0 
010_0_11_111 //  sli  $r3, 8    ! clear garbage 
001_0_11_111 //  addi  $r3, 8 
010_0_11_011 //  sli  $r3, 4    ! constant 128 
011_00_0101 //  redef 0101 
010_0_10_111 //  sli  $q2, 8 
001_0_10_100 //  addi  $q2, 5   ! constant 5 
011_00_0000 //  redef 0000 _(L1)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_1_00_000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011_00_0010 //  redef 0010 
100_01_00_11 //  slt  $p1, $r0, $r3  ! if( i < 128 ) 
011_00_0001 //  redef 0001 
011_00_0100 //  redef 0100 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1001 //  slb $q3, 1001 
011_11_01_11 //  bnz  $p1, END2 
011_00_0110 //  redef 0110 
010_0_01_111 //  sli  $r1, 8    ! j = 0 
011_00_0010 //  redef 0010 
011_00_0101 //  redef 0101 
011_01_00_00 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011_00_0000 //  redef 0000 _(L2)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
101_01_00_00 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010_0_01_011 //  sli  $q1, 4         ! temp <<= 4 
010_1_00_000 //  sri  $q0, 1         ! buf >>= 1 
011_00_0001 //  redef 0001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0011 //  slb $q3, 0011 
011_11_01_11 //  bnz  $q1, NO_PAT1 
011_00_0110 //  redef 0110 
001_0_10_000 //  addi  $r2, 1         ! cnt += 1 
011_00_0000 //  redef 0000 _(NO_PAT1)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_0_01_000 //  addi  $r1, 1         ! j += 1 
011_00_0001 //  redef 0001 
100_01_01_10 //  slt  $p1, $r1, $q2  ! if ( j < 5 ) 
011_00_0100 //  redef 0100 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0010 //  slb $q3, 0010 
011_11_01_11 //  bnz  $p1, L2 
001_0_01_000 //  addi  $p1, 1        ! $p0 = 1 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0001 //  slb $q3, 0001 
011_11_01_11 //  bnz  $p1, L1 
011_00_0000 //  redef 0000 _(END1)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
000_10_1100 //  slb  $p2, 1100 
010_0_10_011 //  sli  $p2, 4    ! write location 192 
011_00_0110 //  redef 0110 
011_10_10_10 //  sw  $r2, $p2   ! data_mem[192] = cnt 
011_00_0000 //  redef 0000 _(num_bytes)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
010_0_00_111 //  sli  $r0, 8    ! clear i 
011_00_1010 //  redef 1010 
000_00_1010 //  slb  $r0, 1010 ! i = 0x0A 
010_0_00_011 //  sli  $r0, 4    ! i = 0xA0 = 160 
010_0_10_111 //  sli  $r2, 8    ! cnt = 0 
010_0_11_111 //  sli  $r3, 8    ! clear garbage 
001_0_11_111 //  addi  $r3, 8 
010_0_11_011 //  sli  $r3, 4    ! constant 128 
011_00_0101 //  redef 0101 
010_0_10_111 //  sli  $q2, 8 
001_0_10_100 //  addi  $q2, 5   ! constant 5 
011_00_0000 //  redef 0000 _(L3)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_1_00_000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011_00_0010 //  redef 0010 
100_01_00_11 //  slt  $p1, $r0, $r3  ! if( i < 128 ) 
011_00_0001 //  redef 0001 
011_00_0100 //  redef 0100 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1001 //  slb $q3, 1001 
011_11_01_11 //  bnz  $p1, END2 
011_00_0110 //  redef 0110 
010_0_01_111 //  sli  $r1, 8    ! j = 0 
011_00_0111 //  redef 0111 
010_0_10_000 //  sli  $s2, 0    ! pat_det = 0 
011_00_0010 //  redef 0010 
011_00_0101 //  redef 0101 
011_01_00_00 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011_00_0000 //  redef 0000 _(L4)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
101_01_00_00 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010_0_01_011 //  sli  $q1, 4         ! temp <<= 4 
010_1_00_000 //  sri  $q0, 1         ! buf >>= 1 
011_00_0110 //  redef 0110 
001_0_01_000 //  addi  $r1, 1         ! j += 1 
011_00_0001 //  redef 0001 
011_00_0101 //  redef 0101 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1000 //  slb $q3, 1000 
011_11_01_11 //  bnz  $q1, NO_PAT2    ! if( temp != 0) 
011_00_0110 //  redef 0110 
001_0_10_000 //  addi  $r2, 1         ! cnt += 1 
011_00_0111 //  redef 0111 
001_0_10_000 //  addi  $s2, 1         ! pat_det = 1 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0110 //  slb $q3, 0110 
011_11_10_11 //  bnz  $s2, L3 
011_00_0000 //  redef 0000 _(NO_PAT2)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0001 //  redef 0001 
011_00_0110 //  redef 0110 
100_01_01_10 //  slt  $p1, $r1, $q2  ! if ( j < 5 ) 
011_00_0100 //  redef 0100 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0111 //  slb $q3, 0111 
011_11_01_11 //  bnz  $p1, L4 
001_0_01_000 //  addi  $p1, 1        ! $p0 = 1 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_0110 //  slb $q3, 0110 
011_11_01_11 //  bnz  $p1, L3 
011_00_0000 //  redef 0000 _(END2)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
000_10_1100 //  slb  $p2, 1100 
010_0_10_011 //  sli  $p2, 4    ! write location 192 
001_0_10_000 //  addi  $p2, 1 
011_00_0110 //  redef 0110 
011_10_10_10 //  sw  $r2, $p2   ! data_mem[193] = cnt 
011_00_0000 //  redef 0000 _(num_occur)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_1010 //  redef 1010 
000_00_1010 //  slb  $r0, 1010 ! 0x0A 
011_00_0110 //  redef 0110 
010_0_00_011 //  sli  $r0, 4    ! i = 0xA0 = 160 
011_00_0010 //  redef 0010 
011_00_0100 //  redef 0100 
011_01_00_00 //  lw  $p0, $r0   ! $p0 = data_mem[160] 
010_0_00_011 //  sli  $p0, 4    ! adjust pattern 
011_00_0110 //  redef 0110 
010_0_01_111 //  sli  $r1, 8    ! j = 0 
010_0_10_111 //  sli  $r2, 8    ! cnt = 0 
010_0_11_111 //  sli  $r3, 8    ! clear garbage 
001_0_11_111 //  addi  $r3, 8 
010_0_11_011 //  sli  $r3, 4    ! constant 128 
011_00_0101 //  redef 0101 
010_0_10_111 //  sli  $q2, 8 
001_0_10_011 //  addi  $q2, 4   ! constant 4 
011_00_0111 //  redef 0111 
010_0_10_111 //  sli  $s2, 8 
001_0_10_010 //  addi  $s2, 3   ! constant 3 
011_00_0110 //  redef 0110 
001_1_00_000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011_00_0101 //  redef 0101 
011_01_00_00 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011_00_0000 //  redef 0000 _(L5)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0001 //  redef 0001 
011_00_0110 //  redef 0110 
011_00_1011 //  redef 1011 
100_00_01_10 //  slt  $s0, $r1, $q2   ! if(4 < j) s0 = 1 else s0 = 0 
011_00_0111 //  redef 0111 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1101 //  slb $q3, 1101 
011_11_00_11 //  bnz  $s0, L6         ! If j turns to 5 this will branch 
011_00_0000 //  redef 0000 
011_00_0101 //  redef 0101 
101_01_00_00 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010_1_01_011 //  sri  $q1, 4         ! temp >>= 4 
011_00_0010 //  redef 0010 
011_00_0111 //  redef 0111 
011_00_1011 //  redef 1011 
100_00_10_01 //  slt  $s0, $s2, $r1  ! if( 3 < j ) 
011_00_0001 //  redef 0001 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1100 //  slb $q3, 1100 
011_11_00_11 //  bnz  $s0, PAT_CHECK 
011_00_0101 //  redef 0101 
010_0_00_000 //  sli  $q0, 1     ! buf <<= 1 
011_00_0000 //  redef 0000 _(PAT_CHECK)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_0_01_000 //  addi  $r1, 1    ! j++ 
011_00_0001 //  redef 0001 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1011 //  slb $q3, 1011 
011_11_01_11 //  bnz  $q1, L5  ! if (temp != 0x00) branch 
011_00_0110 //  redef 0110 
001_0_10_000 //  addi  $r2, 1  ! cnt++ 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1011 //  slb $q3, 1011 
011_11_10_11 //  bnz  $r2, L5  ! This will always branch to L5 b/c j condition up there 
011_00_0000 //  redef 0000 _(L6)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_1_00_000 //  subi  $r0, 1        ! i= r0 = 158 
011_00_0010 //  redef 0010 
011_00_1011 //  redef 1011 
100_00_00_11 //  slt  $s0, $r0, $r3  ! branch if i < 128 
011_00_0001 //  redef 0001 
011_00_0111 //  redef 0111 
011_00_1001 //  redef 1001 
000_11_0001 //  slb $q3, 0001 
010_0_11_011 //  sli $q3, 4 
000_11_0011 //  slb $q3, 0011 
011_11_00_11 //  bnz  $s0, END3 
011_00_0010 //  redef 0010 
011_01_00_00 //  lw  $s0, $r0  ! buf1 = str[i] = data_mem[i] 
010_1_00_011 //  sri  $s0, 4   ! buf1 >>= 4 
011_00_0011 //  redef 0011 
011_00_0101 //  redef 0101 
111_00_00_00 //  or  $q0, $q0, $s0  ! import upper half of data_mem 
010_0_00_000 //  sli  $q0, 1   ! buf <<= 1 
011_00_0110 //  redef 0110 
010_0_01_111 //  sli  $r1, 8    ! j = 0 reset j 
011_00_0000 //  redef 0000 _(L7)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0101 //  redef 0101 
010_0_10_111 //  sli  $q2, 8    ! clear constant 4 
001_0_10_010 //  addi  $q2, 3   ! and make constant 3 
011_00_0010 //  redef 0010 
011_00_1011 //  redef 1011 
100_00_10_01 //  slt  $s0, $q2, $r1     ! if ( 3 < j ) 
011_00_0001 //  redef 0001 
011_00_0111 //  redef 0111 
011_00_1001 //  redef 1001 
000_11_0001 //  slb $q3, 0001 
010_0_11_011 //  sli $q3, 4 
000_11_0000 //  slb $q3, 0000 
011_11_00_11 //  bnz  $s0, PRE_L8 ! branch when j = 4 
010_0_10_111 //  sli  $s2, 8 
001_0_10_001 //  addi  $s2, 2   ! constant 2 
011_00_0000 //  redef 0000 
011_00_0101 //  redef 0101 
101_01_00_00 //  xor  $q1, $q0, $p0  ! temp = buf^pat 
010_1_01_011 //  sri  $q1, 4         ! temp >>= 4 
011_00_0010 //  redef 0010 
011_00_0111 //  redef 0111 
011_00_1011 //  redef 1011 
100_00_10_01 //  slt  $s0, $s2, $r1  ! if (2 < j) set s0 = 1 else s0 = 0 
011_00_0001 //  redef 0001 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1111 //  slb $q3, 1111 
011_11_00_11 //  bnz  $s0, PAT_CHECK1  ! don't skip over next line until j is 3 
011_00_0101 //  redef 0101 
010_0_00_000 //  sli  $q0, 1         ! buf <<=1 
011_00_0000 //  redef 0000 _(PAT_CHECK1)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_0_01_000 //  addi  $r1, 1    ! j++ 
011_00_0001 //  redef 0001 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1011 //  slb $q3, 1011 
011_11_01_11 //  bnz  $q1, L5  ! if (temp != 0x00) branch 
011_00_0110 //  redef 0110 
001_0_10_000 //  addi  $r2, 1  ! cnt++ 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1110 //  slb $q3, 1110 
011_11_10_11 //  bnz  $r2, L7  ! This will always branch to L5 b/c j condition up there 
011_00_0000 //  redef 0000 _(PRE_L8)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0010 //  redef 0010 
011_00_0111 //  redef 0111 
011_01_00_00 //  lw  $s0, $r0  ! buf1 = str[i] = data_mem[i] 
010_0_11_111 //  sli  $s3, 8   ! clear s3 
011_00_1011 //  redef 1011 
000_11_0x0F //  slb  $s3, 0x0F  ! set lower bits 
011_00_0011 //  redef 0011 
110_00_00_11 //  and  $s0, $s0, $s3 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
111_00_00_00 //  or  $q0, $q0, $s0    ! buf = (buf | (data_mem[i])) 
010_0_00_000 //  sli  $q0, 1   ! buf <<= 1 
011_00_0110 //  redef 0110 
010_0_01_111 //  sli  $r1, 8    ! j = 0 reset j 
011_00_0000 //  redef 0000 _(L8)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0010 //  redef 0010 
011_00_0101 //  redef 0101 
011_00_1011 //  redef 1011 
100_00_10_01 //  slt  $s0, $q2, $r1     ! if ( 3 < j ) 
011_00_0001 //  redef 0001 
011_00_0111 //  redef 0111 
011_00_1001 //  redef 1001 
000_11_0000 //  slb $q3, 0000 
010_0_11_011 //  sli $q3, 4 
000_11_1101 //  slb $q3, 1101 
011_11_00_11 //  bnz  $s0, L6 ! branch when j = 4 
011_00_0000 //  redef 0000 
011_00_0101 //  redef 0101 
101_01_00_00 //  xor  $q1, $q0, $p0  ! temp = buf^pat 
010_1_01_011 //  sri  $q1, 4         ! temp >>= 4 
011_00_0010 //  redef 0010 
011_00_0111 //  redef 0111 
011_00_1011 //  redef 1011 
100_00_10_01 //  slt  $s0, $s2, $r1  ! if (2 < j) set s0 = 1 else s0 = 0 
011_00_0001 //  redef 0001 
011_00_1001 //  redef 1001 
000_11_0001 //  slb $q3, 0001 
010_0_11_011 //  sli $q3, 4 
000_11_0010 //  slb $q3, 0010 
011_11_00_11 //  bnz  $s0, PAT_CHECK2  ! don't skip over next line until j is 3 
011_00_0101 //  redef 0101 
010_0_00_000 //  sli  $q0, 1         ! buf <<=1 
011_00_0000 //  redef 0000 _(PAT_CHECK2)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
011_00_0110 //  redef 0110 
001_0_01_000 //  addi  $r1, 1    ! j++ 
011_00_0001 //  redef 0001 
011_00_0101 //  redef 0101 
011_00_1001 //  redef 1001 
000_11_0001 //  slb $q3, 0001 
010_0_11_011 //  sli $q3, 4 
000_11_0001 //  slb $q3, 0001 
011_11_01_11 //  bnz  $q1, L8  ! if (temp != 0x00) branch 
011_00_0110 //  redef 0110 
001_0_10_000 //  addi  $r2, 1  ! cnt++ 
000_11_0001 //  slb $q3, 0001 
010_0_11_011 //  sli $q3, 4 
000_11_0001 //  slb $q3, 0001 
011_11_10_11 //  bnz  $r2, L8  ! This will always branch to L5 b/c j condition up there 
011_00_0000 //  redef 0000 _(END3)_
011_00_0100 //  redef 0100 
011_00_1000 //  redef 1000 
000_11_1100 //  slb  $p3, 1100 
010_0_11_011 //  sli  $p3, 4 
001_0_11_001 //  addi  $p3, 2   ! $p3 = 194 (write location 3) 
011_00_0110 //  redef 0110 
011_10_10_11 //  sw  $r2, $p3   ! mem[194] = cnt 
011_00_1111 //  redef 1111 
