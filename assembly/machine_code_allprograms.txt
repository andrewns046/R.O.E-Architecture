011000000 //  redef 0000 _(reload1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
010000111 //  sli $p0, 8 
010001111 //  sli $p1, 8 
010010111 //  sli $p2, 8 
010011111 //  sli $p3, 8 
011000101 //  redef 0101 
010000111 //  sli $q0, 8 
010001111 //  sli $q1, 8 
010010111 //  sli $q2, 8 
010011111 //  sli $q3, 8 
011000110 //  redef 0110 
010000111 //  sli $r0, 8 
010001111 //  sli $r1, 8 
010010111 //  sli $r2, 8 
010011111 //  sli $r3, 8 
011000111 //  redef 0111 
010000111 //  sli $s0, 8 
010001111 //  sli $s1, 8 
010010111 //  sli $s2, 8 
010011111 //  sli $s3, 8 
011000000 //  redef 0000 _(prog1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011001011 //  redef 1011 
000010001 //  slb $s1, 0001 
011000111 //  redef 0111 
010001011 //  sli $s1, 4 
000011110 //  slb $s1, 1110 
000101111 //  slb $s2, 1111 
011000000 //  redef 0000 _(loop_prog1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000011 //  redef 0011 
011000110 //  redef 0110 
011010000 //  lw $r0, $s0 
011000111 //  redef 0111 
001000000 //  addi $s0, 1 
011000110 //  redef 0110 
011010100 //  lw $r1, $s0 
011000111 //  redef 0111 
001000000 //  addi $s0, 1 
011000010 //  redef 0010 
011000100 //  redef 0100 
111000000 //  or $p0, $p0, $r0 
111010101 //  or $p1, $p1, $r1 
010100011 //  sri $p0, 4 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011001001 //  redef 1001 
111110001 //  or $q3, $p0, $p1 
010000111 //  sli $p0, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000000 //  or $p0, $p0, $r0 
010000011 //  sli $p0, 4 
010100100 //  sri $p0, 5 
111010100 //  or $p1, $p1, $r0 
010101110 //  sri $p1, 7 
010001010 //  sli $p1, 3 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010101 //  or $p1, $p1, $r1 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000101 //  redef 0101 
011001001 //  redef 1001 
111101000 //  or $q2, $q2, $p0 ! q2 = par bit 4 end page 1 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000001 //  or $p0, $p0, $r1 
010100000 //  sri $p0, 1 
010000101 //  sli $p0, 6 
111010100 //  or $p1, $p1, $r0 
010001000 //  sli $p1, 1 
010101101 //  sri $p1, 6 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 
000101101 //  slb $p2, 1101 
011000000 //  redef 0000 
110010110 //  and $p1, $p1, $p2 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000101 //  redef 0101 
011001001 //  redef 1001 
111010100 //  or $q1, $q1, $p0 ! q1 = par bit 2 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
010010111 //  sli $p2, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000001 //  or $p0, $p0, $r1 
010100001 //  sri $p0, 2 
010000110 //  sli $p0, 7 
111010101 //  or $p1, $p1, $r1 
010001110 //  sli $p1, 7 
010101000 //  sri $p1, 1 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 
010001000 //  sli $p1, 1 
010101110 //  sri $p1, 7 
010001100 //  sli $p1, 5 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 ! end page 2 
010001010 //  sli $p1, 3 
010101110 //  sri $p1, 7 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0 $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 
000101011 //  slb $p2, 1011 
011000000 //  redef 0000 
110010110 //  and $p1, $p1, $p2 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000101 //  redef 0101 
011001001 //  redef 1001 
111000000 //  or $q0, $q0, $p0 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
010010111 //  sli $p2, 8 
011000001 //  redef 0001 
011001000 //  redef 1000 
111000011 //  or $p0, $p0, $q3 
010000110 //  sli $p0, 7 
111010110 //  or $p1, $p1, $q2 
010001010 //  sli $p1, 3 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000001 //  redef 0001 
111010101 //  or $p1, $p1, $q1 
010001000 //  sli $p1, 1 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000001 //  redef 0001 
111000000 //  or $p0, $p0, $q0 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 
010001011 //  sli $p1, 4 
010101100 //  sri $p1, 5 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010100 //  or $p1, $p1, $r0 
010001110 //  sli $p1, 7 
010101100 //  sri $p1, 5 ! end page 3 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010101 //  or $p1, $p1, $r1 
010001011 //  sli $p1, 4 
111101000 //  or $p2, $p2, $r0 
010110011 //  sri $p2, 4 
011000000 //  redef 0000 
111010110 //  or $p1, $p1, $p2 
010010111 //  sli $p2, 8 
011000011 //  redef 0011 
011100001 //  sw $p0, $s1 
011000111 //  redef 0111 
001001000 //  addi $s1, 1 
011000100 //  redef 0100 
011100101 //  sw $p1, $s1 
011000111 //  redef 0111 
001001000 //  addi $s1, 1 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
010001111 //  sli $p1, 8 
011000101 //  redef 0101 
010000111 //  sli $q0, 8 
010001111 //  sli $q1, 8 
010010111 //  sli $q2, 8 
010011111 //  sli $q3, 8 
011000111 //  redef 0111 
001110000 //  subi $s2, 1 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000110010 //  slb $q3, 0010 
011000111 //  redef 0111 
011111011 //  bnz $s2, loop_prog1 
011000000 //  redef 0000 _(finished1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000000 //  redef 0000 _(reload2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
010000111 //  sli $p0, 8 
010001111 //  sli $p1, 8 
010010111 //  sli $p2, 8 
010011111 //  sli $p3, 8 
011000101 //  redef 0101 
010000111 //  sli $q0, 8 
010001111 //  sli $q1, 8 
010010111 //  sli $q2, 8 
010011111 //  sli $q3, 8 
011000110 //  redef 0110 
010000111 //  sli $r0, 8 
010001111 //  sli $r1, 8 
010010111 //  sli $r2, 8 
010011111 //  sli $r3, 8 
011000111 //  redef 0111 
010000111 //  sli $s0, 8 
010001111 //  sli $s1, 8 
010010111 //  sli $s2, 8 
010011111 //  sli $s3, 8 
011000000 //  redef 0000 _(prog2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011001011 //  redef 1011 
000000100 //  slb $s0, 0100 
011000111 //  redef 0111 
010000011 //  sli $s0, 4 
000010101 //  slb $s1, 0101 
010001011 //  sli $s1, 4 
000011110 //  slb $s1, 1110 
000101111 //  slb $s2, 1111 
011000000 //  redef 0000 _(loop_prog2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000011 //  redef 0011 
011000110 //  redef 0110 
011010000 //  lw $r0, $s0 
011000111 //  redef 0111 
001000000 //  addi $s0, 1 
011000110 //  redef 0110 
011010100 //  lw $r1, $s0 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
011000010 //  redef 0010 
111000000 //  or $p0, $p0, $r0 
010100110 //  sri $p0, 7 
010001111 //  sli $p1, 8 
111010101 //  or $p1, $p1, $r1 
010001000 //  sli $p1, 1 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000111 //  redef 0111 
011001011 //  redef 1011 
101111100 //  xor $s3, $s3, $p0 
010011000 //  sli $s3, 1 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000000 //  or $p0, $p0, $r0 
010000000 //  sli $p0, 1 
010100011 //  sri $p0, 4 
111010101 //  or $p1, $p1, $r1 
010101010 //  sri $p1, 3 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000111 //  redef 0111 
011001011 //  redef 1011 
101111100 //  xor $s3, $s3, $p0 
010011000 //  sli $s3, 1 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000000 //  or $p0, $p0, $r0 
010100100 //  sri $p0, 5 
010000101 //  sli $p0, 6 
111010100 //  or $p1, $p1, $r0 
010101000 //  sri $p1, 1 
010001101 //  sli $p1, 6 
010101001 //  sri $p1, 2 
011000000 //  redef 0000 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000010 //  redef 0010 
111010101 //  or $p1, $p1, $r1 
010001000 //  sli $p1, 1 
010101101 //  sri $p1, 6 
010001001 //  sli $p1, 2 
111101001 //  or $p2, $p2, $r1 
010010100 //  sli $p2, 5 
010110101 //  sri $p2, 6 
011000000 //  redef 0000 
111010110 //  or $p1, $p1, $p2 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
011000111 //  redef 0111 
011001011 //  redef 1011 
101111100 //  xor $s3, $s3, $p0 
010011000 //  sli $s3, 1 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
010010111 //  sli $p2, 8 
011000010 //  redef 0010 
011001000 //  redef 1000 
111000000 //  or $p0, $p0, $r0 
000110101 //  slb $p3, 0101 
010011011 //  sli $p3, 4 
000110101 //  slb $p3, 0101 
011000000 //  redef 0000 
110000011 //  and $p0, $p0, $p3 
011000010 //  redef 0010 
111010101 //  or $p1, $p1, $r1 
011000000 //  redef 0000 
110010111 //  and $p1, $p1, $p3 
010001000 //  sli $p1, 1 
111000001 //  or $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101011 //  sri $p1, 4 
010000011 //  sli $p0, 4 
010100011 //  sri $p0, 4 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101001 //  sri $p1, 2 
010000101 //  sli $p0, 6 
010100101 //  sri $p0, 6 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
111010001 //  or $p1, $p0, $p1 
010101000 //  sri $p1, 1 
010000110 //  sli $p0, 7 
010100110 //  sri $p0, 7 
101000001 //  xor $p0, $p0, $p1 
010001111 //  sli $p1, 8 
010011111 //  sli $p3, 8 
011000111 //  redef 0111 
011001011 //  redef 1011 
101111100 //  xor $s3, $s3, $p0 
011000100 //  redef 0100 
010000111 //  sli $p0, 8 
011000011 //  redef 0011 
011001000 //  redef 1000 
100000011 //  slt $p0, $p0, $s3 
000010001 //  slb $p1, 0001 
011000000 //  redef 0000 
101000001 //  xor $p0, $p0, $p1 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111101 //  slb $q3, 1101 
011000100 //  redef 0100 
011110011 //  bnz $p0, decode 
011000111 //  redef 0111 
001111000 //  subi $s3, 1 
001111111 //  subi $s3, 8 
011001000 //  redef 1000 
000001000 //  slb $p0, 1000 
011000000 //  redef 0000 
100001100 //  slt $p0, $s3, $p0 
011000100 //  redef 0100 
101000001 //  xor $p0, $p0, $p1 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000110111 //  slb $q3, 0111 
011000100 //  redef 0100 
011110011 //  bnz $p0, mem0 
011001010 //  redef 1010 
000100001 //  slb $r2, 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111000 //  slb $q3, 1000 
011000100 //  redef 0100 
011110111 //  bnz $p1, flipping 
011000000 //  redef 0000 _(mem0)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000111 //  redef 0111 
001011111 //  addi $s3, 8 
011000000 //  redef 0000 _(flipping)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000000100 //  slb $p0, 0100 
011000011 //  redef 0011 
110000011 //  and $p0, $p0, $s3 
010100001 //  sri $p0, 2 
000100001 //  slb $p2, 0001 
011000000 //  redef 0000 
101000010 //  xor $p0, $p0, $p2 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111001 //  slb $q3, 1001 
011000100 //  redef 0100 
011110011 //  bnz $p0, notfour 
010001011 //  sli $p1, 4 
011000000 //  redef 0000 _(notfour)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000000010 //  slb $p0, 0010 
011000011 //  redef 0011 
110000011 //  and $p0, $p0, $s3 
010100000 //  sri $p0, 1 
011000000 //  redef 0000 
101000010 //  xor $p0, $p0, $p2 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111010 //  slb $q3, 1010 
011000100 //  redef 0100 
011110011 //  bnz $p0, nottwo 
010001001 //  sli $p1, 2 
011000000 //  redef 0000 _(nottwo)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000000001 //  slb $p0, 0001 
011000011 //  redef 0011 
110000011 //  and $p0, $p0, $s3 
011000000 //  redef 0000 
101000010 //  xor $p0, $p0, $p2 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111011 //  slb $q3, 1011 
011000100 //  redef 0100 
011110011 //  bnz $p0, notone 
010001000 //  sli $p1, 1 
011000000 //  redef 0000 _(notone)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111100 //  slb $q3, 1100 
011000110 //  redef 0110 
011111011 //  bnz $r2, mem1flip 
011000000 //  redef 0000 
011001010 //  redef 1010 
101000001 //  xor $r0, $r0, $p1 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000111101 //  slb $q3, 1101 
011000100 //  redef 0100 
011111011 //  bnz $p2, decode 
011000000 //  redef 0000 _(mem1flip)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
011001010 //  redef 1010 
101010101 //  xor $r1, $r1, $p1 
011000000 //  redef 0000 _(decode)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000010 //  redef 0010 
011000101 //  redef 0101 
011001001 //  redef 1001 
111000001 //  or $q0, $q0, $r1 
010100011 //  sri $q0, 4 
111010101 //  or $q1, $q1, $r1 
010001011 //  sli $q1, 4 
011000110 //  redef 0110 
010101111 //  sri $r1, 8 
011000001 //  redef 0001 
011001010 //  redef 1010 
111010100 //  or $r1, $r1, $q0 
011000101 //  redef 0101 
010100111 //  sri $q0, 8 
011000010 //  redef 0010 
011001001 //  redef 1001 
111000000 //  or $q0, $q0, $r0 
010000000 //  sli $q0, 1 
010100100 //  sri $q0, 5 
010000000 //  sli $q0, 1 
011000001 //  redef 0001 
111010001 //  or $q1, $q0, $q1 
010000111 //  sli $q0, 8 
011000010 //  redef 0010 
111000000 //  or $q0, $q0, $r0 
010000100 //  sli $q0, 5 
010100110 //  sri $q0, 7 
011000001 //  redef 0001 
111010001 //  or $q1, $q0, $q1 
011000110 //  redef 0110 
010000111 //  sli $r0, 8 
011001010 //  redef 1010 
111000001 //  or $r0, $r0, $q1 
011000011 //  redef 0011 
011100001 //  sw $r0, $s1 
011000111 //  redef 0111 
001001000 //  addi $s1, 1 
011000110 //  redef 0110 
011100101 //  sw $r1, $s1 
011000111 //  redef 0111 
001001000 //  addi $s1, 1 
001000000 //  addi $s0, 1 
001110000 //  subi $s2, 1 
010111111 //  sri $s3, 8 
011000101 //  redef 0101 
010100111 //  sri $q0, 8 
010101111 //  sri $q1, 8 
011000110 //  redef 0110 
010110111 //  sri $r2, 8 
011000100 //  redef 0100 
010100111 //  sri $p0, 8 
010101111 //  sri $p1, 8 
010110111 //  sri $p2, 8 
010111111 //  sri $p3, 8 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110000 //  slb $q3, 0000 
010011011 //  sli $q3, 4 
000110110 //  slb $q3, 0110 
011000111 //  redef 0111 
011111011 //  bnz $s2, loop_prog2 
011000000 //  redef 0000 _(finished2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000000 //  redef 0000 _(reload3)_
011000100 //  redef 0100 
011001000 //  redef 1000 
010000111 //  sli $p0, 8 
010001111 //  sli $p1, 8 
010010111 //  sli $p2, 8 
010011111 //  sli $p3, 8 
011000101 //  redef 0101 
010000111 //  sli $q0, 8 
010001111 //  sli $q1, 8 
010010111 //  sli $q2, 8 
010011111 //  sli $q3, 8 
011000110 //  redef 0110 
010000111 //  sli $r0, 8 
010001111 //  sli $r1, 8 
010010111 //  sli $r2, 8 
010011111 //  sli $r3, 8 
011000111 //  redef 0111 
010000111 //  sli $s0, 8 
010001111 //  sli $s1, 8 
010010111 //  sli $s2, 8 
010011111 //  sli $s3, 8 
011000000 //  redef 0000 _(num_occur_in)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011001010 //  redef 1010 
000001010 //  slb  $r0, 1010 ! 0x0A 
011000110 //  redef 0110 
010000011 //  sli  $r0, 4    ! $r0 = 0xA0 = 160 
011000010 //  redef 0010 
011000100 //  redef 0100 
011010000 //  lw  $p0, $r0   ! $p0 = data_mem[160] 
011000110 //  redef 0110 
010010111 //  sli  $r2, 8    ! cnt = 0 
010011111 //  sli  $r3, 8    ! clear garbage 
001011111 //  addi  $r3, 8 
010011011 //  sli  $r3, 4    ! constant 128 
011000101 //  redef 0101 
010010111 //  sli  $q2, 8 
001010100 //  addi  $q2, 5   ! constant 5 
011000000 //  redef 0000 _(L1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001100000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011000010 //  redef 0010 
100010011 //  slt  $p1, $r0, $r3  ! if( i < 128 ) 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110100 //  slb $q3, 0100 
011000100 //  redef 0100 
011110111 //  bnz  $p1, END1 
011000110 //  redef 0110 
010001111 //  sli  $r1, 8    ! j = 0 
011000010 //  redef 0010 
011000101 //  redef 0101 
011010000 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011000000 //  redef 0000 _(L2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000101 //  redef 0101 
011001001 //  redef 1001 
101010000 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010001011 //  sli  $q1, 4         ! temp <<= 4 
010100000 //  sri  $q0, 1         ! buf >>= 1 
011000001 //  redef 0001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110011 //  slb $q3, 0011 
011110111 //  bnz  $q1, NO_PAT1 
011000110 //  redef 0110 
001010000 //  addi  $r2, 1         ! cnt += 1 
011000000 //  redef 0000 _(NO_PAT1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001001000 //  addi  $r1, 1         ! j += 1 
011000001 //  redef 0001 
100010110 //  slt  $p1, $r1, $q2  ! if ( j < 5 ) 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110010 //  slb $q3, 0010 
011000100 //  redef 0100 
011110111 //  bnz  $p1, L2 
001001000 //  addi  $p1, 1        ! $p0 = 1 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110001 //  slb $q3, 0001 
011000100 //  redef 0100 
011110111 //  bnz  $p1, L1 
011000000 //  redef 0000 _(END1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000101100 //  slb  $p2, 1100 
010010011 //  sli  $p2, 4    ! write location 192 
011000110 //  redef 0110 
011101010 //  sw  $r2, $p2   ! data_mem[192] = cnt 
011000000 //  redef 0000 _(num_bytes)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
010000111 //  sli  $r0, 8    ! clear i 
011001010 //  redef 1010 
000001010 //  slb  $r0, 1010 ! i = 0x0A 
010000011 //  sli  $r0, 4    ! i = 0xA0 = 160 
010010111 //  sli  $r2, 8    ! cnt = 0 
010011111 //  sli  $r3, 8    ! clear garbage 
001011111 //  addi  $r3, 8 
010011011 //  sli  $r3, 4    ! constant 128 
011000101 //  redef 0101 
010010111 //  sli  $q2, 8 
001010100 //  addi  $q2, 5   ! constant 5 
011000000 //  redef 0000 _(L3)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001100000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011000010 //  redef 0010 
100010011 //  slt  $p1, $r0, $r3  ! if( i < 128 ) 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111001 //  slb $q3, 1001 
011000100 //  redef 0100 
011110111 //  bnz  $p1, END2 
011000110 //  redef 0110 
010001111 //  sli  $r1, 8    ! j = 0 
011000111 //  redef 0111 
010010000 //  sli  $s2, 0    ! pat_det = 0 
011000010 //  redef 0010 
011000101 //  redef 0101 
011010000 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011000000 //  redef 0000 _(L4)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000101 //  redef 0101 
011001001 //  redef 1001 
101010000 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010001011 //  sli  $q1, 4         ! temp <<= 4 
010100000 //  sri  $q0, 1         ! buf >>= 1 
011000110 //  redef 0110 
001001000 //  addi  $r1, 1         ! j += 1 
011000001 //  redef 0001 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111000 //  slb $q3, 1000 
011110111 //  bnz  $q1, NO_PAT2    ! if( temp != 0) 
011000110 //  redef 0110 
001010000 //  addi  $r2, 1         ! cnt += 1 
011000111 //  redef 0111 
001010000 //  addi  $s2, 1         ! pat_det = 1 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110110 //  slb $q3, 0110 
011000111 //  redef 0111 
011111011 //  bnz  $s2, L3 
011000000 //  redef 0000 _(NO_PAT2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000001 //  redef 0001 
011000110 //  redef 0110 
100010110 //  slt  $p1, $r1, $q2  ! if ( j < 5 ) 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110111 //  slb $q3, 0111 
011000100 //  redef 0100 
011110111 //  bnz  $p1, L4 
001001000 //  addi  $p1, 1        ! $p0 = 1 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000110110 //  slb $q3, 0110 
011000100 //  redef 0100 
011110111 //  bnz  $p1, L3 
011000000 //  redef 0000 _(END2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000101100 //  slb  $p2, 1100 
010010011 //  sli  $p2, 4    ! write location 192 
001010000 //  addi  $p2, 1 
011000110 //  redef 0110 
011101010 //  sw  $r2, $p2   ! data_mem[193] = cnt 
011000000 //  redef 0000 _(num_occur)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011001010 //  redef 1010 
000001010 //  slb  $r0, 1010 ! 0x0A 
011000110 //  redef 0110 
010000011 //  sli  $r0, 4    ! i = 0xA0 = 160 
011000010 //  redef 0010 
011000100 //  redef 0100 
011010000 //  lw  $p0, $r0   ! $p0 = data_mem[160] 
010000011 //  sli  $p0, 4    ! adjust pattern 
011000110 //  redef 0110 
010001111 //  sli  $r1, 8    ! j = 0 
010010111 //  sli  $r2, 8    ! cnt = 0 
010011111 //  sli  $r3, 8    ! clear garbage 
001011111 //  addi  $r3, 8 
010011011 //  sli  $r3, 4    ! constant 128 
011000101 //  redef 0101 
010010111 //  sli  $q2, 8 
001010011 //  addi  $q2, 4   ! constant 4 
011000111 //  redef 0111 
010010111 //  sli  $s2, 8 
001010010 //  addi  $s2, 3   ! constant 3 
011000110 //  redef 0110 
001100000 //  subi  $r0, 1   ! i = 159, then decrement onward ;) 
011000101 //  redef 0101 
011010000 //  lw  $q0, $r0   ! load buf = data_mem[i] 
011000000 //  redef 0000 _(L5)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000010 //  redef 0010 
011000101 //  redef 0101 
011001011 //  redef 1011 
100001001 //  slt  $s0, $q2, $r1   ! if(4 < j) s0 = 1 else s0 = 0 
011000001 //  redef 0001 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111101 //  slb $q3, 1101 
011000111 //  redef 0111 
011110011 //  bnz  $s0, L6         ! If j turns to 5 this will branch 
011000000 //  redef 0000 
011000101 //  redef 0101 
101010000 //  xor  $q1, $q0, $p0  ! temp = buf ^ pat 
010101011 //  sri  $q1, 4         ! temp >>= 4 
011000010 //  redef 0010 
011000111 //  redef 0111 
011001011 //  redef 1011 
100001001 //  slt  $s0, $s2, $r1  ! if( 3 < j ) 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111100 //  slb $q3, 1100 
011000111 //  redef 0111 
011110011 //  bnz  $s0, PAT_CHECK 
011000101 //  redef 0101 
010000000 //  sli  $q0, 1     ! buf <<= 1 
011000000 //  redef 0000 _(PAT_CHECK)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001001000 //  addi  $r1, 1    ! j++ 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111011 //  slb $q3, 1011 
011110111 //  bnz  $q1, L5  ! if (temp != 0x00) branch 
011000110 //  redef 0110 
001010000 //  addi  $r2, 1  ! cnt++ 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111011 //  slb $q3, 1011 
011000110 //  redef 0110 
011111011 //  bnz  $r2, L5  ! This will always branch to L5 b/c j condition up there 
011000000 //  redef 0000 _(L6)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001100000 //  subi  $r0, 1        ! i= r0 = 158 
011000010 //  redef 0010 
011001011 //  redef 1011 
100000011 //  slt  $s0, $r0, $r3  ! branch if i < 128 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110010 //  slb $q3, 0010 
010011011 //  sli $q3, 4 
000110011 //  slb $q3, 0011 
011000111 //  redef 0111 
011110011 //  bnz  $s0, END3 
011000010 //  redef 0010 
011010000 //  lw  $s0, $r0  ! buf1 = str[i] = data_mem[i] 
010100011 //  sri  $s0, 4   ! buf1 >>= 4 
011000011 //  redef 0011 
011000101 //  redef 0101 
111000000 //  or  $q0, $q0, $s0  ! import upper half of data_mem 
010000000 //  sli  $q0, 1   ! buf <<= 1 
011000110 //  redef 0110 
010001111 //  sli  $r1, 8    ! j = 0 reset j 
011000000 //  redef 0000 _(L7)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000101 //  redef 0101 
010010111 //  sli  $q2, 8    ! clear constant 4 
001010010 //  addi  $q2, 3   ! and make constant 3 
011000010 //  redef 0010 
011001011 //  redef 1011 
100001001 //  slt  $s0, $q2, $r1     ! if ( 3 < j ) 
011000001 //  redef 0001 
011001001 //  redef 1001 
000110010 //  slb $q3, 0010 
010011011 //  sli $q3, 4 
000110000 //  slb $q3, 0000 
011000111 //  redef 0111 
011110011 //  bnz  $s0, PRE_L8 ! branch when j = 4 
010010111 //  sli  $s2, 8 
001010001 //  addi  $s2, 2   ! constant 2 
011000000 //  redef 0000 
011000101 //  redef 0101 
101010000 //  xor  $q1, $q0, $p0  ! temp = buf^pat 
010101011 //  sri  $q1, 4         ! temp >>= 4 
011000010 //  redef 0010 
011000111 //  redef 0111 
011001011 //  redef 1011 
100001001 //  slt  $s0, $s2, $r1  ! if (2 < j) set s0 = 1 else s0 = 0 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111111 //  slb $q3, 1111 
011000111 //  redef 0111 
011110011 //  bnz  $s0, PAT_CHECK1  ! don't skip over next line until j is 3 
011000101 //  redef 0101 
010000000 //  sli  $q0, 1         ! buf <<=1 
011000000 //  redef 0000 _(PAT_CHECK1)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001001000 //  addi  $r1, 1    ! j++ 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111110 //  slb $q3, 1110 
011110111 //  bnz  $q1, L7  ! if (temp != 0x00) branch 
011000110 //  redef 0110 
001010000 //  addi  $r2, 1  ! cnt++ 
011000101 //  redef 0101 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111110 //  slb $q3, 1110 
011000110 //  redef 0110 
011111011 //  bnz  $r2, L7  ! This will always branch to L5 b/c j condition up there 
011000000 //  redef 0000 _(PRE_L8)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000010 //  redef 0010 
011000111 //  redef 0111 
011010000 //  lw  $s0, $r0  ! buf1 = str[i] = data_mem[i] 
010011111 //  sli  $s3, 8   ! clear s3 
011001011 //  redef 1011 
000111111 //  slb  $s3, 1111  ! set lower bits 
011000011 //  redef 0011 
110000011 //  and  $s0, $s0, $s3 
011000101 //  redef 0101 
011001001 //  redef 1001 
111000000 //  or  $q0, $q0, $s0    ! buf = (buf | (data_mem[i])) 
010000000 //  sli  $q0, 1   ! buf <<= 1 
011000110 //  redef 0110 
010001111 //  sli  $r1, 8    ! j = 0 reset j 
011000000 //  redef 0000 _(L8)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000010 //  redef 0010 
011000101 //  redef 0101 
011001011 //  redef 1011 
100001001 //  slt  $s0, $q2, $r1     ! if ( 3 < j ) 
011000001 //  redef 0001 
011001001 //  redef 1001 
000110001 //  slb $q3, 0001 
010011011 //  sli $q3, 4 
000111101 //  slb $q3, 1101 
011000111 //  redef 0111 
011110011 //  bnz  $s0, L6           ! branch when j = 4 
011000000 //  redef 0000 
011000101 //  redef 0101 
101010000 //  xor  $q1, $q0, $p0  ! temp = buf^pat 
010101011 //  sri  $q1, 4         ! temp >>= 4 
011000010 //  redef 0010 
011000111 //  redef 0111 
011001011 //  redef 1011 
100001001 //  slt  $s0, $s2, $r1  ! if (2 < j) set s0 = 1 else s0 = 0 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110010 //  slb $q3, 0010 
010011011 //  sli $q3, 4 
000110010 //  slb $q3, 0010 
011000111 //  redef 0111 
011110011 //  bnz  $s0, PAT_CHECK2  ! don't skip over next line until j is 3 
011000101 //  redef 0101 
010000000 //  sli  $q0, 1         ! buf <<=1 
011000000 //  redef 0000 _(PAT_CHECK2)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011000110 //  redef 0110 
001001000 //  addi  $r1, 1    ! j++ 
011000001 //  redef 0001 
011000101 //  redef 0101 
011001001 //  redef 1001 
000110010 //  slb $q3, 0010 
010011011 //  sli $q3, 4 
000110001 //  slb $q3, 0001 
011110111 //  bnz  $q1, L8  ! if (temp != 0x00) branch 
011000110 //  redef 0110 
001010000 //  addi  $r2, 1  ! cnt++ 
011000101 //  redef 0101 
000110010 //  slb $q3, 0010 
010011011 //  sli $q3, 4 
000110001 //  slb $q3, 0001 
011000110 //  redef 0110 
011111011 //  bnz  $r2, L8  ! This will always branch to L5 b/c j condition up there 
011000000 //  redef 0000 _(END3)_
011000100 //  redef 0100 
011001000 //  redef 1000 
000111100 //  slb  $p3, 1100 
010011011 //  sli  $p3, 4 
001011001 //  addi  $p3, 2   ! $p3 = 194 (write location 3) 
011000110 //  redef 0110 
011101011 //  sw  $r2, $p3   ! mem[194] = cnt 
011000000 //  redef 0000 _(finished3)_
011000100 //  redef 0100 
011001000 //  redef 1000 
011001111 //  redef 1111 
